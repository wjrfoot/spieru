/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gov.usda.ars.spieru.durum;

import gov.usda.ars.spieru.durum.sandbox.TestSSDelete;
import gov.usda.ars.spieru.test.FindJar;
import ij.ImagePlus;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Vector;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wjrfo
 */
public class DurumFrame extends javax.swing.JFrame {

    private Config config = new Config();
    private int selectedSubimageIndex = 0;
    private int selectedSubimageLength = 0;

    /**
     * Creates new form DurumFrame
     */
    public DurumFrame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTPLegal = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        JLSubimage = new javax.swing.JLabel();
        JSPOutput = new javax.swing.JScrollPane();
        JTOutput = new javax.swing.JTable();
        JPBImages = new javax.swing.JProgressBar();
        JPBSubimages = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jPOutput = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTFOutputFileName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTFOutputDirectory = new javax.swing.JTextField();
        jBSelectOutputDirectory = new javax.swing.JButton();
        JBOpenSpreadsheet = new javax.swing.JButton();
        JSPListFiles = new javax.swing.JScrollPane();
        JLFileList = new javax.swing.JList<>();
        JBAdd = new javax.swing.JButton();
        JBRun = new javax.swing.JButton();
        JBClear = new javax.swing.JButton();
        JBExit = new javax.swing.JButton();
        JBConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(800, 490));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));

        JTPLegal.setText("Durum:  Vitreous/Chalky Seeds\nW Rust / D Brabec  \nUSDA-ARS  Manhattan, KS"); // NOI18N
        jScrollPane1.setViewportView(JTPLegal);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 90));

        JSPOutput.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        JTOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        JSPOutput.setViewportView(JTOutput);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLSubimage, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(JSPOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(JPBImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(JPBSubimages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JSPOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JLSubimage, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPBImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JPBSubimages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(172, 172, 172))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 470, 510));

        jLabel1.setText("Output File");

        jTFOutputFileName.setText("jTextField1");
        jTFOutputFileName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFOutputFileNamejTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFOutputFileNameFocusLost(evt);
            }
        });
        jTFOutputFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFOutputFileNameActionPerformed(evt);
            }
        });

        jLabel3.setText("Directory");

        jTFOutputDirectory.setText("jTextField2");

        jBSelectOutputDirectory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/folder.png"))); // NOI18N
        jBSelectOutputDirectory.setPreferredSize(new java.awt.Dimension(20, 20));
        jBSelectOutputDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSelectOutputDirectoryActionPerformed(evt);
            }
        });

        JBOpenSpreadsheet.setText("Open Output");
        JBOpenSpreadsheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBOpenSpreadsheetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPOutputLayout = new javax.swing.GroupLayout(jPOutput);
        jPOutput.setLayout(jPOutputLayout);
        jPOutputLayout.setHorizontalGroup(
            jPOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPOutputLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTFOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPOutputLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTFOutputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JBOpenSpreadsheet)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBSelectOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPOutputLayout.setVerticalGroup(
            jPOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPOutputLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPOutputLayout.createSequentialGroup()
                        .addGroup(jPOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTFOutputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(JBOpenSpreadsheet))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTFOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPOutputLayout.createSequentialGroup()
                        .addComponent(jBSelectOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        JLFileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        JLFileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JLFileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                JLFileListValueChanged(evt);
            }
        });
        JSPListFiles.setViewportView(JLFileList);

        JBAdd.setMnemonic('A');
        JBAdd.setText("Add file");
        JBAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAddActionPerformed(evt);
            }
        });

        JBRun.setMnemonic('R');
        JBRun.setText("Run");
        JBRun.setEnabled(false);
        JBRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBRunActionPerformed(evt);
            }
        });

        JBClear.setMnemonic('C');
        JBClear.setText("Clear");
        JBClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBClearActionPerformed(evt);
            }
        });

        JBExit.setMnemonic('x');
        JBExit.setText("Exit");
        JBExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBExitActionPerformed(evt);
            }
        });

        JBConfig.setText("Config");
        JBConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JSPListFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(JBExit)
                        .addGap(46, 46, 46)
                        .addComponent(JBConfig))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(JBAdd)
                        .addGap(42, 42, 42)
                        .addComponent(JBRun)
                        .addGap(45, 45, 45)
                        .addComponent(JBClear))
                    .addComponent(jPOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JSPListFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBAdd)
                    .addComponent(JBRun)
                    .addComponent(JBClear))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JBExit)
                    .addComponent(JBConfig))
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 321, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_JBExitActionPerformed

    private void JBAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAddActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setFileHidingEnabled(false);
        fileChooser.setMultiSelectionEnabled(true);

        Config fileConfig = new Config();
        fileConfig.loadProperties();
//        File dirF = new File(System.getProperty("user.dir"), "images");
//        fileChooser.setCurrentDirectory(dirF);
        File dirF = new File(fileConfig.getLastImageDirectory());
        fileChooser.setCurrentDirectory(dirF);
//        fileChooser.setCurrentDirectory(new File(lastInputDirectory));
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File arg0) {
                String fileName = arg0.getName();
                return fileName.endsWith("tif") || fileName.endsWith("bmp") || fileName.endsWith("png")
                        || arg0.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Must be tif, bmp or png";
            }
        });

        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

            File[] selectedFiles = fileChooser.getSelectedFiles();
            fileConfig.setLastImageDirectory(selectedFiles[0].getPath());
            fileConfig.saveProperties();
            DefaultListModel<String> listModel = (DefaultListModel<String>) JLFileList.getModel();
            for (File file : selectedFiles) {
                ImageRecord imageRecord = new ImageRecord(file);
                listModel.addElement(imageRecord.getFile().getAbsolutePath());
            }

            JBRun.setEnabled(true);
        }

    }//GEN-LAST:event_JBAddActionPerformed

    private void JBClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBClearActionPerformed
//        JTAListFiles.setText("");
        DefaultListModel<String> listModel = (DefaultListModel<String>) JLFileList.getModel();
        listModel.clear();
        ImageRecord.clearAll();
    }//GEN-LAST:event_JBClearActionPerformed

    private void JBRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBRunActionPerformed

        /* chack if output file ia already open */
        File file = new File(config.getOutputDirectory(), config.getOutputFileName() + ".xlsx");
        File toFile = new File(config.getOutputDirectory(), config.getOutputFileName() + ".bak" + ".xlsx");
        if (file.exists()) {
            try {
                /* if name change fails it's assume that the spreadsheet is open */
                Files.move(Paths.get(file.getAbsolutePath()), Paths.get(toFile.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);
                /* restore original name. won't get here if previous name change failed. */
                Files.move(Paths.get(toFile.getAbsolutePath()), Paths.get(file.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Close spreadsheet to continue.", "Spreadsheet already open", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        config.loadProperties();

        AnalyzeScanWorker analyzeScanWorker = new AnalyzeScanWorker(this);

        analyzeScanWorker.addPropertyChangeListener(
                new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                System.out.println("property " + evt.getPropertyName() + " new value " + evt.getNewValue());
                if ("progress".equals(evt.getPropertyName())) {
                    JPBImages.setValue((Integer) evt.getNewValue());
                }
                if ("DONE".equals(evt.getNewValue())) {
                    System.out.println("done");
                    JPBImages.setValue(JPBImages.getMaximum());

                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    displayResultsTables(ImageRecord.getImageRecords());
                } else {
                }
            }
        });

        analyzeScanWorker.execute();

        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        System.out.println("image records " + ImageRecord.getImageRecords().size());

        JBRun.setEnabled(false);

    }//GEN-LAST:event_JBRunActionPerformed

    ImagePlus lastImage = null;
    ImagePlus lastROIImage = null;

    private void JLFileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_JLFileListValueChanged

        if (evt.getValueIsAdjusting()) {
            int sel = JLFileList.getSelectedIndex();
            if (ImageRecord.getImageRecords().size() == 0) {
                return;
            }
            if (lastImage != null) {
                lastImage.hide();
                lastROIImage.hide();
            }
            ImageRecord imageRecord = ImageRecord.getImageRecords().get(sel);
//            ImagePlus imagePlus = imageRecord.getImage();
            lastImage = imageRecord.getImage();
            lastImage.setTitle("Original " + imageRecord.getFile().getName());
            lastImage.getWindow().setNextLocation(100, 100);
            lastImage.show();
            lastROIImage = imageRecord.getRoiImage();
            lastROIImage.getWindow().setNextLocation(900, 100);
            lastROIImage.setTitle("Chalk " + imageRecord.getFile().getName());
            lastROIImage.show();

            SetupMouseWheelListerners(lastImage, lastROIImage);
        }
    }//GEN-LAST:event_JLFileListValueChanged
    private void SetupMouseWheelListerners(ImagePlus imagePlus, ImagePlus dupPlus) {

        imagePlus.getWindow().getCanvas().addMouseWheelListener(new MyMouseWheelListener(dupPlus));

        MouseWheelListener[] mwls = dupPlus.getWindow().getCanvas().getMouseWheelListeners();
        for (MouseWheelListener mwl : mwls) {
            dupPlus.getWindow().getCanvas().removeMouseWheelListener(mwl);
        }
        dupPlus.getWindow().getCanvas().addMouseWheelListener(new MyMouseWheelListener(null));

    }

    private class MyMouseWheelListener implements MouseWheelListener {

        ImagePlus dispatchToImp = null;

        public MyMouseWheelListener(ImagePlus imp) {
            dispatchToImp = imp;
        }

        @Override
        public void mouseWheelMoved(MouseWheelEvent arg0) {
            if ((arg0.getModifiersEx() & MouseWheelEvent.CTRL_DOWN_MASK) > 0) {
                if (arg0.getWheelRotation() < 0) {
                    dispatchToImp.getCanvas().zoomIn(arg0.getX(), arg0.getY());
                } else {
                    dispatchToImp.getCanvas().zoomOut(arg0.getX(), arg0.getY());
//                    dispatchToImp.getCanvas().zoomIn(arg0.getX(), arg0.getY());
                }
            }
        }
    }

    private void JBConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConfigActionPerformed
        ConfigEditor dialog = new ConfigEditor(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });
        dialog.setVisible(true);
//        ConfigEditor.main(null);
    }//GEN-LAST:event_JBConfigActionPerformed

    private void jTFOutputFileNamejTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFOutputFileNamejTFFocusGained
        JTextField jtf = (JTextField) evt.getSource();
        jtf.selectAll();
    }//GEN-LAST:event_jTFOutputFileNamejTFFocusGained

    private void jTFOutputFileNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFOutputFileNameFocusLost
        config.setOutputFileName(((JTextField) evt.getSource()).getText());
        Config fileConfig = new Config();
        fileConfig.loadProperties();
        fileConfig.setOutputFileName(((JTextField) evt.getSource()).getText());
        fileConfig.saveProperties();
    }//GEN-LAST:event_jTFOutputFileNameFocusLost

    private void jTFOutputFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFOutputFileNameActionPerformed
        config.setOutputFileName(((JTextField) evt.getSource()).getText());
        Config fileConfig = new Config();
        fileConfig.loadProperties();
        fileConfig.setOutputFileName(((JTextField) evt.getSource()).getText());
        fileConfig.saveProperties();
    }//GEN-LAST:event_jTFOutputFileNameActionPerformed

    private void jBSelectOutputDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSelectOutputDirectoryActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setFileHidingEnabled(false);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setApproveButtonText("Select");

        Config fileConfig = new Config();
        fileConfig.loadProperties();
        //        File dirF = new File(System.getProperty("user.dir"), "images");
        //        fileChooser.setCurrentDirectory(dirF);
        File dirF = new File(fileConfig.getOutputDirectory());
        fileChooser.setSelectedFile(dirF);
        //        fileChooser.setCurrentDirectory(new File(lastInputDirectory));
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File arg0) {
                return arg0.isDirectory();
            }

            @Override
            public String getDescription() {
                return "";
            }
        });

        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String outputDirPath = fileChooser.getSelectedFile().getAbsolutePath();
            jTFOutputDirectory.setText(outputDirPath);
            fileConfig.setOutputDirectory(outputDirPath);
            fileConfig.saveProperties();
            config.setOutputDirectory(outputDirPath);
        }
    }//GEN-LAST:event_jBSelectOutputDirectoryActionPerformed

    private void JBOpenSpreadsheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBOpenSpreadsheetActionPerformed

        File file = new File(config.getOutputDirectory(), config.getOutputFileName() + ".xlsx");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "Spreadsheet file doesn't exist", "File not found", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Desktop.isDesktopSupported()) {
            try {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(file);
            } catch (IOException ex) {
            }
            System.out.println("error");
        }

    }//GEN-LAST:event_JBOpenSpreadsheetActionPerformed

    private void displaySubimage() {
        int sel = JLFileList.getSelectedIndex();
        ImageRecord imageRecord = ImageRecord.getImageRecords().get(sel);
        if (imageRecord.getImage() != null) {
            ImagePlus subimage = imageRecord.getSubImages().get(selectedSubimageIndex);

//                subimage.setTitle("subimage");
//                subimage.show();
            subimage = subimage.duplicate();
            int dims[] = subimage.getDimensions();
            double height = dims[0];
            double factor = 100 / height;
            double width = dims[1] * factor;
//                System.out.println(dims[0] + " " + dims[1] + " " + factor + " " + width + " " + new Double(width).intValue());
            ImagePlus imagePlusResized = subimage.resize(100, 100, "none");
//                ImagePlus imagePlusResized = subimage.resize(100, new Double(width).intValue(), "none");
//                imagePlusResized.setTitle("resized");
//                imagePlusResized.show();
            JLSubimage.setIcon(new ImageIcon(imagePlusResized.getImage()));

        }
    }

    public void displayResultsTables(List<ImageRecord> imageRecords) {

        Vector<Object> vec;
        int[] totals = new int[imageRecords.get(0).getSummaryOutput().getBuckets().length];

        String bucketLabels = "File, Total,";
        bucketLabels += config.getBucketLabels();
        String[] bucketLabelsArray = bucketLabels.split(", ");

//        Dimension dim = jScrollPane1.getPreferredSize();
        int bucketCount = totals.length - 1;
//        int widthAvail = dim.width - 100; 
        int widthAvail = 265; // this should be dynamically set
//        JTOutput.getColumnModel().getColumn(0).setWidth(200);
        JTOutput.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        JTOutput.getColumnModel().getColumn(0).setPreferredWidth(100);
        for (int idx = 0; idx < bucketCount; idx++) {
            JTOutput.getColumnModel().getColumn(idx + 1).setPreferredWidth(widthAvail / bucketCount);
        }

        for (ImageRecord imageRecord : imageRecords) {
            System.out.println("record " + imageRecord.getFile().getName());
            int[] bucketCounts = imageRecord.getSummaryOutput().getBuckets();

            vec = new Vector<>();
            String fileName = imageRecord.getFile().getName();
            vec.add(fileName.substring(0, fileName.indexOf('.')));
            for (int idx = 0; idx < bucketCounts.length; idx++) {
                if (bucketLabelsArray[idx].trim().startsWith("%")) {
                    double tot = bucketCounts[0];
                    double val = bucketCounts[idx - 1];
                    int percent = (int) (val * 100. / tot);
                    vec.add(percent);
                } else {
                    vec.add(bucketCounts[idx]);
                    totals[idx] += bucketCounts[idx];
                }
            }
            ((DefaultTableModel) JTOutput.getModel()).addRow(vec);
        }
        vec = new Vector<>();
        vec.add("Total");
        for (int idx = 0; idx < totals.length; idx++) {
            if (bucketLabelsArray[idx].trim().startsWith("%")) {
                double tot = totals[0];
                double val = totals[idx - 1];
                int percent = (int) (val * 100. / tot);
                vec.add(percent);
            } else {
                vec.add(totals[idx]);
            }
//            vec.add(totals[idx]);
        }        
        ((DefaultTableModel) JTOutput.getModel()).addRow(vec);
        vec = new Vector<>();
        ((DefaultTableModel) JTOutput.getModel()).addRow(vec);
        
    }

//    private void enableSubimageButtons() {
//        JBSubLeft.setEnabled(selectedSubimageIndex > 0);
//        JBSubRight.setEnabled(selectedSubimageIndex < selectedSubimageLength);
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DurumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DurumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DurumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DurumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DurumFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBAdd;
    private javax.swing.JButton JBClear;
    private javax.swing.JButton JBConfig;
    private javax.swing.JButton JBExit;
    private javax.swing.JButton JBOpenSpreadsheet;
    private javax.swing.JButton JBRun;
    private javax.swing.JList<String> JLFileList;
    private javax.swing.JLabel JLSubimage;
    private javax.swing.JProgressBar JPBImages;
    private javax.swing.JProgressBar JPBSubimages;
    private javax.swing.JScrollPane JSPListFiles;
    private javax.swing.JScrollPane JSPOutput;
    private javax.swing.JTable JTOutput;
    private javax.swing.JTextPane JTPLegal;
    private javax.swing.JButton jBSelectOutputDirectory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPOutput;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFOutputDirectory;
    private javax.swing.JTextField jTFOutputFileName;
    // End of variables declaration//GEN-END:variables

    void init() {
        String jarTim = null;
        try {
            jarTim = findJarCreationTime();
            System.out.println("jarTim" + jarTim);
        } catch (IOException ex) {
            Logger.getLogger(DurumFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String text = JTPLegal.getText();
        text = text + "\n" + "Version: " + jarTim;
        JTPLegal.setText(text);
        JLFileList.setModel(new DefaultListModel<>());

        DefaultTableModel dtm = (DefaultTableModel) JTOutput.getModel();

        config.loadProperties();
        String bucketLabels = "File, Total,";
        bucketLabels += config.getBucketLabels();

        dtm.setColumnIdentifiers(bucketLabels.split(","));

        jTFOutputFileName.setText(config.getOutputFileName());
        jTFOutputDirectory.setText(config.getOutputDirectory());

    }

    String findJarCreationTime() throws IOException {
        String path = FindJar.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        String decodedPath = "";
        try {
            decodedPath = URLDecoder.decode(path, "UTF-8");
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(DurumFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(">>>" + decodedPath + "<<<");
        System.out.println(new File(decodedPath).exists());
//Manifest m = new JarFile(decodedPath).getManifest();
//        System.out.println(m);
        File file = new File(decodedPath);
        try {
            BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
            FileTime fileTime = attr.lastModifiedTime();

            LocalDateTime localDateTime = fileTime
                    .toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDateTime();

            String formatted = localDateTime.format(DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss"));

            System.out.println(formatted);
            return formatted;

        } catch (IOException ex) {
            // handle exception
        }

//        JarFile jf = new JarFile("myfile.jar");
//        ZipEntry manifest = jf.getEntry("META-INF/MANIFEST.MF");
//        long manifestTime = manifest.getTime();  //in standard millis
//        System.out.println(manifestTime);
        System.out.println("test");
        return "";
    }

}
